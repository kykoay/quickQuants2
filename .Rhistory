plot(portret)
lines(portret)
lines(portret,xlim=c(-0.15,0.15))
library(shiny)
library(quantmod)
library(xts)
library(rugarch)
library(stargazer)
library(knitr)
#Shows how to read files and read the columns as inputs to quantmod's getSymbols function.
sample=read.table("sample.csv",sep=",")
#turns the ticker into a list of strings, since this is what getSymbol reads.
stock=as.character(sample[,1])
weight=sample[,2]
#Thanks to Joshua Ulrich. See http://stackoverflow.com/questions/5574595/getsymbols-and-using-lapply-cl-and-merge-to-extract-close-prices
getSymbols(stock,src='yahoo',auto.assign=TRUE,from='2013-07-30',to='2013-12-30')
Adjusted <- do.call(merge, lapply(stock, function(x) Ad(get(x))))
portret=0
ret=NA
for (j in 1:length(weight)){
for(i in 2:nrow(Adjusted)){
ret[i]=(as.numeric(Adjusted[i,j])/as.numeric(Adjusted[i-1,j]))-1
}
portret=portret+(weight[j]*ret)
}
portret=na.omit(portret)
lines(portret,xlim=c(-0.15,0.15))
plot()
lines(portret,xlim=c(-0.15,0.15))
plot(portret)
lines(portret,xlim=c(-0.15,0.15))
shiny::runApp('quickQuants2')
shiny::runApp('quickQuants2')
shiny::runApp('quickQuants2')
library(shiny)
library(quantmod)
library(xts)
library(rugarch)
library(stargazer)
library(knitr)
#Shows how to read files and read the columns as inputs to quantmod's getSymbols function.
sample=read.table("sample.csv",sep=",")
#turns the ticker into a list of strings, since this is what getSymbol reads.
stock=as.character(sample[,1])
weight=sample[,2]
#Thanks to Joshua Ulrich. See http://stackoverflow.com/questions/5574595/getsymbols-and-using-lapply-cl-and-merge-to-extract-close-prices
getSymbols(stock,src='yahoo',auto.assign=TRUE,from='2012-07-31',to='2014-07-31')
Adjusted <- do.call(merge, lapply(stock, function(x) Ad(get(x))))
portret=0
ret=NA
for (j in 1:length(weight)){
for(i in 2:nrow(Adjusted)){
ret[i]=(as.numeric(Adjusted[i,j])/as.numeric(Adjusted[i-1,j]))-1
}
portret=portret+(weight[j]*ret)
}
portret=na.omit(portret)
plot(portret,type=lines)
library(shiny)
library(quantmod)
library(xts)
library(rugarch)
library(stargazer)
library(knitr)
#Shows how to read files and read the columns as inputs to quantmod's getSymbols function.
sample=read.table("sample.csv",sep=",")
#turns the ticker into a list of strings, since this is what getSymbol reads.
stock=as.character(sample[,1])
weight=sample[,2]
#Thanks to Joshua Ulrich. See http://stackoverflow.com/questions/5574595/getsymbols-and-using-lapply-cl-and-merge-to-extract-close-prices
getSymbols(stock,src='yahoo',auto.assign=TRUE,from='2012-07-31',to='2014-07-31')
Adjusted <- do.call(merge, lapply(stock, function(x) Ad(get(x))))
portret=0
ret=NA
for (j in 1:length(weight)){
for(i in 2:nrow(Adjusted)){
ret[i]=(as.numeric(Adjusted[i,j])/as.numeric(Adjusted[i-1,j]))-1
}
portret=portret+(weight[j]*ret)
}
portret=na.omit(portret)
plot(portret,type="line"")
f
r)
'0'
""
library(shiny)
library(quantmod)
library(xts)
library(rugarch)
library(stargazer)
library(knitr)
#Shows how to read files and read the columns as inputs to quantmod's getSymbols function.
sample=read.table("sample.csv",sep=",")
#turns the ticker into a list of strings, since this is what getSymbol reads.
stock=as.character(sample[,1])
weight=sample[,2]
#Thanks to Joshua Ulrich. See http://stackoverflow.com/questions/5574595/getsymbols-and-using-lapply-cl-and-merge-to-extract-close-prices
getSymbols(stock,src='yahoo',auto.assign=TRUE,from='2012-07-31',to='2014-07-31')
Adjusted <- do.call(merge, lapply(stock, function(x) Ad(get(x))))
portret=0
ret=NA
for (j in 1:length(weight)){
for(i in 2:nrow(Adjusted)){
ret[i]=(as.numeric(Adjusted[i,j])/as.numeric(Adjusted[i-1,j]))-1
}
portret=portret+(weight[j]*ret)
}
portret=na.omit(portret)
plot(portret,type="line")
library(shiny)
library(quantmod)
library(xts)
library(rugarch)
library(stargazer)
library(knitr)
#Shows how to read files and read the columns as inputs to quantmod's getSymbols function.
sample=read.table("sample.csv",sep=",")
#turns the ticker into a list of strings, since this is what getSymbol reads.
stock=as.character(sample[,1])
weight=sample[,2]
#Thanks to Joshua Ulrich. See http://stackoverflow.com/questions/5574595/getsymbols-and-using-lapply-cl-and-merge-to-extract-close-prices
getSymbols(stock,src='yahoo',auto.assign=TRUE,from='2012-07-31',to='2014-07-31')
Adjusted <- do.call(merge, lapply(stock, function(x) Ad(get(x))))
portret=0
ret=NA
for (j in 1:length(weight)){
for(i in 2:nrow(Adjusted)){
ret[i]=(as.numeric(Adjusted[i,j])/as.numeric(Adjusted[i-1,j]))-1
}
portret=portret+(weight[j]*ret)
}
portret=na.omit(portret)
plot(portret,type="line")
shiny::runApp('quickQuants2')
library(shiny)
library(quantmod)
library(xts)
library(rugarch)
library(stargazer)
library(knitr)
#Shows how to read files and read the columns as inputs to quantmod's getSymbols function.
sample=read.table("sample.csv",sep=",")
#turns the ticker into a list of strings, since this is what getSymbol reads.
stock=as.character(sample[,1])
weight=sample[,2]
#Thanks to Joshua Ulrich. See http://stackoverflow.com/questions/5574595/getsymbols-and-using-lapply-cl-and-merge-to-extract-close-prices
getSymbols(stock,src='yahoo',auto.assign=TRUE,from='2012-07-31',to='2014-07-31')
Adjusted <- do.call(merge, lapply(stock, function(x) Ad(get(x))))
portret=0
ret=NA
for (j in 1:length(weight)){
for(i in 2:nrow(Adjusted)){
ret[i]=(as.numeric(Adjusted[i,j])/as.numeric(Adjusted[i-1,j]))-1
}
portret=portret+(weight[j]*ret)
}
portret=na.omit(portret)
plot(portret,type="line",ylim=c(-0.2,0.2))
shiny::runApp('quickQuants2')
#example on merging factors and portret.
library(shiny)
library(quantmod)
library(xts)
library(rugarch)
library(stargazer)
library(knitr)
#Download factors from Ken French
download.file("http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/ftp/F-F_Research_Data_Factors_daily.zip","factors.zip")
factors=unz("factors.zip","F-F_Research_Data_Factors_daily.txt")
factors=read.table(factors,header=TRUE,skip=4,fill=TRUE)
n=nrow(factors)-1
factors=unz("factors.zip","F-F_Research_Data_Factors_daily.txt")
factors=read.table(factors,header=TRUE,skip=4,fill=TRUE,nrows=n)
row.names(factors)=(as.Date(row.names(factors),format="%Y%m%d"))
names(factors)[names(factors)=="Mkt.RF"]="MarketPremium"
factors=as.xts(factors/100,dateFormat="Date")
#get portfolio return
#Shows how to read files and read the columns as inputs to quantmod's getSymbols function.
sample=read.table("sample.csv",sep=",")
#turns the ticker into a list of strings, since this is what getSymbol reads.
stock=as.character(sample[,1])
weight=sample[,2]
#Thanks to Joshua Ulrich. See http://stackoverflow.com/questions/5574595/getsymbols-and-using-lapply-cl-and-merge-to-extract-close-prices
getSymbols(stock,src='yahoo',auto.assign=TRUE,from='2012-07-31',to='2014-07-31')
Adjusted <- do.call(merge, lapply(stock, function(x) Ad(get(x))))
portret=0
ret=NA
for (j in 1:length(weight)){
for(i in 2:nrow(Adjusted)){
ret[i]=(as.numeric(Adjusted[i,j])/as.numeric(Adjusted[i-1,j]))-1
}
portret=portret+(weight[j]*ret)
}
portret=na.omit(portret)
reg=merge(portret,factors,all=c(TRUE,FALSE))
?merge
runApp("quickQuants2")
library("shiny", lib.loc="~/R/win-library/3.0")
runApp("quickQuants2")
shiny::runApp('quickQuants2')
shiny::runApp('quickQuants2')
shiny::runApp('quickQuants2')
library(shiny)
library(quantmod)
library(xts)
library(rugarch)
library(stargazer)
library(knitr)
sample=read.table("sample.csv",sep=",")
stock=as.character(sample[,1])
weight=sample[,2]
View(sample)
getSymbols(stock,src='yahoo',auto.assign=TRUE,from='2012-07-31',to='2014-07-31')
Adjusted <- do.call(merge, lapply(stock, function(x) Ad(get(x))))
View(`F`)
View(SPY)
View(Adjusted)
portret=0
ret=NA
for (j in 1:length(weight)){
for(i in 2:nrow(Adjusted)){
ret[i]=(as.numeric(Adjusted[i,j])/as.numeric(Adjusted[i-1,j]))-1
}
portret=portret+(weight[j]*ret)
}
portret=na.omit(portret)
ret
class(ret)
class(portret)
test=list(ticker=NULL,weight=NULL)
test$ticker[1]="SPY"
test$ticker[2]="F"
test$weight=c(.5,.5)
test
inFile=read.table("sample.csv",sep=",")
View(inFile)
inFile=read.table("sample.csv",sep=",")
start="2011-04-20"
download.file("http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/ftp/F-F_Research_Data_Factors_daily.zip","factors.zip")
factors=unz("factors.zip","F-F_Research_Data_Factors_daily.txt")
factors=read.table(factors,header=TRUE,skip=4,fill=TRUE)
n=nrow(factors)-1
factors=unz("factors.zip","F-F_Research_Data_Factors_daily.txt")
factors=read.table(factors,header=TRUE,skip=4,fill=TRUE,nrows=n)
row.names(factors)=(as.Date(row.names(factors),format="%Y%m%d"))
names(factors)[names(factors)=="Mkt.RF"]="MarketPremium"
factors=as.xts(factors/100,dateFormat="Date")
View(factors)
View(inFile)
portfolio=list(
ticker=NULL
,weight=NULL
,ret=NULL
)
test$weight=c(.5,.5)
class(factors)
names(factors)
factors$HML[1:5]
factors$HML[1:5]%*%c(1,2,3,4,5)
factors$HML[1:5]*c(1,2,3,4,5)
factors$HML[1:5]
portfolio=list(
ticker=NULL
,weight=NULL
,ret=NULL
)
for(i in 1:nrow(inFile)){
portfolio$ticker[i]=inFile[i,1]
portfolio$weight[i]=inFile[i,2]
ret=try(getSymbols(portfolio$ticker[i],auto.assign=FALSE,from=as.Date(start)))
if(class(ret)[1]=="try-error"){
##Catch error here with:
#error handling later
print("Oops... Something went horribly wrong. Please call Merissa.")
return("fuck")
}
ret=ret[,6]
names(ret)[1]="price"
ret$ret=NA
for ( i in 2:nrow(ret)){
ret$ret[i]=as.numeric(ret$price[i])/as.numeric(ret$pric[i-1])-1
}
ret=na.omit(ret$ret)
portfolio$ret=portfolio$ret+ret*portfolio$weight[i]
}
i
portfolio
inFile[i,1]
portfolio=list(
ticker=NULL
,weight=NULL
,ret=NULL
)
for(i in 1:nrow(inFile)){
portfolio$ticker[i]=as.character(inFile[i,1])
portfolio$weight[i]=inFile[i,2]
ret=try(getSymbols(portfolio$ticker[i],auto.assign=FALSE,from=as.Date(start)))
if(class(ret)[1]=="try-error"){
##Catch error here with:
#error handling later
print("Oops... Something went horribly wrong. Please call Merissa.")
return("fuck")
}
ret=ret[,6]
names(ret)[1]="price"
ret$ret=NA
for ( i in 2:nrow(ret)){
ret$ret[i]=as.numeric(ret$price[i])/as.numeric(ret$pric[i-1])-1
}
ret=na.omit(ret$ret)
portfolio$ret=portfolio$ret+ret*portfolio$weight[i]
}
out=(merge(portfolio$ret,factors,all=c(TRUE,FALSE)))
portfolio
i
nrow(inFile)
print(i)
portfolio=list(
ticker=NULL
,weight=NULL
,ret=NULL
)
print(i)
portfolio$ticker[i]=as.character(inFile[i,1])
portfolio=list(
ticker=NULL
,weight=NULL
,ret=NULL
)
i=1
print(i)
portfolio$ticker[i]=as.character(inFile[i,1])
portfolio$weight[i]=inFile[i,2]
ret=try(getSymbols(portfolio$ticker[i],auto.assign=FALSE,from=as.Date(start)))
if(class(ret)[1]=="try-error"){
##Catch error here with:
#error handling later
print("Oops... Something went horribly wrong. Please call Merissa.")
return("fuck")
}
ret=ret[,6]
names(ret)[1]="price"
ret$ret=NA
for ( i in 2:nrow(ret)){
ret$ret[i]=as.numeric(ret$price[i])/as.numeric(ret$pric[i-1])-1
}
ret
ret=na.omit(ret$ret)
portfolio$ret=portfolio$ret+ret*portfolio$weight[i]
portfolio$ret=merge(portfolio$ret,ret*portfolio$weight[i],all = c(FALSE,FALSE))
portfolio$ret
if(i==1){
portfolio$ret=ret*portfolio$weight[i],all = c(FALSE,FALSE)
}else{
portfolio$ret=merge(portfolio$ret,ret*portfolio$weight[i],all = c(FALSE,FALSE))
}
if(i==1){
portfolio$ret=ret*portfolio$weight[i]
}else{
portfolio$ret=merge(portfolio$ret,ret*portfolio$weight[i],all = c(FALSE,FALSE))
}
portfolio$ret
ret*portfolio$weight[i]
i
i=1
if(i==1){
portfolio$ret=ret*portfolio$weight[i]
}else{
portfolio$ret=merge(portfolio$ret,ret*portfolio$weight[i],all = c(FALSE,FALSE))
}
i
portfolio$ret
portfolio=list(
ticker=NULL
,weight=NULL
,ret=NULL
)
for(i in (1:nrow(inFile))){
print(i)
portfolio$ticker[i]=as.character(inFile[i,1])
portfolio$weight[i]=inFile[i,2]
ret=try(getSymbols(portfolio$ticker[i],auto.assign=FALSE,from=as.Date(start)))
if(class(ret)[1]=="try-error"){
##Catch error here with:
#error handling later
print("Oops... Something went horribly wrong. Please call Merissa.")
return("fuck")
}
ret=ret[,6]
names(ret)[1]="price"
ret$ret=NA
for ( j in 2:nrow(ret)){
ret$ret[j]=as.numeric(ret$price[j])/as.numeric(ret$pric[j-1])-1
}
ret=na.omit(ret$ret)
if(i==1){
portfolio$ret=ret*portfolio$weight[i]
}else{
portfolio$ret=merge(portfolio$ret,ret*portfolio$weight[i],all = c(FALSE,FALSE))
}
#Keep in mind that portfolio$ret isn't ret in the usual sense... it's more like a contribution since it's already multiplied by the weight
}
colSums(portfolio$ret)
portfolio$ret
rowSums(portfolio$ret)
portRet=as.xts(rowSums(portfolio$ret),order.by = index(portfolio$ret))
portRet
portfolio=list(
ticker=NULL
,weight=NULL
,ret=NULL
)
for(i in (1:nrow(inFile))){
print(i)
portfolio$ticker[i]=as.character(inFile[i,1])
portfolio$weight[i]=inFile[i,2]
ret=try(getSymbols(portfolio$ticker[i],auto.assign=FALSE,from=as.Date(start)))
if(class(ret)[1]=="try-error"){
##Catch error here with:
#error handling later
print("Oops... Something went horribly wrong. Please call Merissa.")
return("fuck")
}
ret=ret[,6]
names(ret)[1]="price"
ret$ret=NA
for ( j in 2:nrow(ret)){
ret$ret[j]=as.numeric(ret$price[j])/as.numeric(ret$pric[j-1])-1
}
ret=na.omit(ret$ret)
if(i==1){
portfolio$ret=ret*portfolio$weight[i]
}else{
portfolio$ret=merge(portfolio$ret,ret*portfolio$weight[i],all = c(FALSE,FALSE))
}
#Keep in mind that portfolio$ret isn't ret in the usual sense... it's more like a contribution since it's already multiplied by the weight
}
portRet=as.xts(rowSums(portfolio$ret),order.by = index(portfolio$ret))
out=(merge(portRet,factors,all=c(TRUE,FALSE)))
View(out)
View(portRet)
View(portRet)
View(portRet)
View(portRet)
View(portRet)
View(portRet)
View(portRet)
View(portRet)
View(portRet)
View(portRet)
View(portRet)
View(portRet)
View(portRet)
View(portRet)
View(portRet)
View(portRet)
View(portRet)
View(portRet)
inFile<-read.table("sample.csv",sep=",")
start='2012-01-01'
library(shiny)
library(quantmod)
library(xts)
library(rugarch)
library(stargazer)
library(knitr)
download.file("http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/ftp/F-F_Research_Data_Factors_daily.zip","factors.zip")
factors=unz("factors.zip","F-F_Research_Data_Factors_daily.txt")
factors=read.table(factors,header=TRUE,skip=4,fill=TRUE)
n=nrow(factors)-1
factors=unz("factors.zip","F-F_Research_Data_Factors_daily.txt")
factors=read.table(factors,header=TRUE,skip=4,fill=TRUE,nrows=n)
row.names(factors)=(as.Date(row.names(factors),format="%Y%m%d"))
names(factors)[names(factors)=="Mkt.RF"]="MarketPremium"
factors=as.xts(factors/100,dateFormat="Date")
buildPortReg=function(inFile,start,factors){
portfolio=list(
ticker=NULL
,weight=NULL
,ret=NULL
)
for(i in (1:nrow(inFile))){
portfolio$ticker[i]=as.character(inFile[i,1])
portfolio$weight[i]=inFile[i,2]
ret=try(getSymbols(portfolio$ticker[i],auto.assign=FALSE,from=as.Date(start)))
if(class(ret)[1]=="try-error"){
##Catch error here with:
#error handling later
print("Oops... Something went horribly wrong. Please call Merissa.")
return("fuck")
}
ret=ret[,6]
names(ret)[1]="price"
ret$ret=NA
for ( j in 2:nrow(ret)){
ret$ret[j]=as.numeric(ret$price[j])/as.numeric(ret$pric[j-1])-1
}
ret=na.omit(ret$ret)
if(i==1){
portfolio$ret=ret*portfolio$weight[i]
}else{
portfolio$ret=merge(portfolio$ret,ret*portfolio$weight[i],all = c(FALSE,FALSE))
}
#Keep in mind that portfolio$ret isn't ret in the usual sense... it's more like a contribution since it's already multiplied by the weight
}
portRet=as.xts(rowSums(portfolio$ret),order.by = index(portfolio$ret))
out=(merge(portRet,factors,all=c(TRUE,FALSE)))
return(out)
}
}
buildPortReg(inFile,start,factors)
