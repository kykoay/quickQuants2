}
ret=ret[,6]
names(ret)[1]="price"
ret$ret=NA
for ( i in 2:nrow(ret)){
ret$ret[i]=as.numeric(ret$price[i])/as.numeric(ret$pric[i-1])-1
}
ret
ret=na.omit(ret$ret)
portfolio$ret=portfolio$ret+ret*portfolio$weight[i]
portfolio$ret=merge(portfolio$ret,ret*portfolio$weight[i],all = c(FALSE,FALSE))
portfolio$ret
if(i==1){
portfolio$ret=ret*portfolio$weight[i],all = c(FALSE,FALSE)
}else{
portfolio$ret=merge(portfolio$ret,ret*portfolio$weight[i],all = c(FALSE,FALSE))
}
if(i==1){
portfolio$ret=ret*portfolio$weight[i]
}else{
portfolio$ret=merge(portfolio$ret,ret*portfolio$weight[i],all = c(FALSE,FALSE))
}
portfolio$ret
ret*portfolio$weight[i]
i
i=1
if(i==1){
portfolio$ret=ret*portfolio$weight[i]
}else{
portfolio$ret=merge(portfolio$ret,ret*portfolio$weight[i],all = c(FALSE,FALSE))
}
i
portfolio$ret
portfolio=list(
ticker=NULL
,weight=NULL
,ret=NULL
)
for(i in (1:nrow(inFile))){
print(i)
portfolio$ticker[i]=as.character(inFile[i,1])
portfolio$weight[i]=inFile[i,2]
ret=try(getSymbols(portfolio$ticker[i],auto.assign=FALSE,from=as.Date(start)))
if(class(ret)[1]=="try-error"){
##Catch error here with:
#error handling later
print("Oops... Something went horribly wrong. Please call Merissa.")
return("fuck")
}
ret=ret[,6]
names(ret)[1]="price"
ret$ret=NA
for ( j in 2:nrow(ret)){
ret$ret[j]=as.numeric(ret$price[j])/as.numeric(ret$pric[j-1])-1
}
ret=na.omit(ret$ret)
if(i==1){
portfolio$ret=ret*portfolio$weight[i]
}else{
portfolio$ret=merge(portfolio$ret,ret*portfolio$weight[i],all = c(FALSE,FALSE))
}
#Keep in mind that portfolio$ret isn't ret in the usual sense... it's more like a contribution since it's already multiplied by the weight
}
colSums(portfolio$ret)
portfolio$ret
rowSums(portfolio$ret)
portRet=as.xts(rowSums(portfolio$ret),order.by = index(portfolio$ret))
portRet
portfolio=list(
ticker=NULL
,weight=NULL
,ret=NULL
)
for(i in (1:nrow(inFile))){
print(i)
portfolio$ticker[i]=as.character(inFile[i,1])
portfolio$weight[i]=inFile[i,2]
ret=try(getSymbols(portfolio$ticker[i],auto.assign=FALSE,from=as.Date(start)))
if(class(ret)[1]=="try-error"){
##Catch error here with:
#error handling later
print("Oops... Something went horribly wrong. Please call Merissa.")
return("fuck")
}
ret=ret[,6]
names(ret)[1]="price"
ret$ret=NA
for ( j in 2:nrow(ret)){
ret$ret[j]=as.numeric(ret$price[j])/as.numeric(ret$pric[j-1])-1
}
ret=na.omit(ret$ret)
if(i==1){
portfolio$ret=ret*portfolio$weight[i]
}else{
portfolio$ret=merge(portfolio$ret,ret*portfolio$weight[i],all = c(FALSE,FALSE))
}
#Keep in mind that portfolio$ret isn't ret in the usual sense... it's more like a contribution since it's already multiplied by the weight
}
portRet=as.xts(rowSums(portfolio$ret),order.by = index(portfolio$ret))
out=(merge(portRet,factors,all=c(TRUE,FALSE)))
View(out)
View(portRet)
View(portRet)
View(portRet)
View(portRet)
View(portRet)
View(portRet)
View(portRet)
View(portRet)
View(portRet)
View(portRet)
View(portRet)
View(portRet)
View(portRet)
View(portRet)
View(portRet)
View(portRet)
View(portRet)
View(portRet)
inFile<-read.table("sample.csv",sep=",")
start='2012-01-01'
library(shiny)
library(quantmod)
library(xts)
library(rugarch)
library(stargazer)
library(knitr)
download.file("http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/ftp/F-F_Research_Data_Factors_daily.zip","factors.zip")
factors=unz("factors.zip","F-F_Research_Data_Factors_daily.txt")
factors=read.table(factors,header=TRUE,skip=4,fill=TRUE)
n=nrow(factors)-1
factors=unz("factors.zip","F-F_Research_Data_Factors_daily.txt")
factors=read.table(factors,header=TRUE,skip=4,fill=TRUE,nrows=n)
row.names(factors)=(as.Date(row.names(factors),format="%Y%m%d"))
names(factors)[names(factors)=="Mkt.RF"]="MarketPremium"
factors=as.xts(factors/100,dateFormat="Date")
buildPortReg=function(inFile,start,factors){
portfolio=list(
ticker=NULL
,weight=NULL
,ret=NULL
)
for(i in (1:nrow(inFile))){
portfolio$ticker[i]=as.character(inFile[i,1])
portfolio$weight[i]=inFile[i,2]
ret=try(getSymbols(portfolio$ticker[i],auto.assign=FALSE,from=as.Date(start)))
if(class(ret)[1]=="try-error"){
##Catch error here with:
#error handling later
print("Oops... Something went horribly wrong. Please call Merissa.")
return("fuck")
}
ret=ret[,6]
names(ret)[1]="price"
ret$ret=NA
for ( j in 2:nrow(ret)){
ret$ret[j]=as.numeric(ret$price[j])/as.numeric(ret$pric[j-1])-1
}
ret=na.omit(ret$ret)
if(i==1){
portfolio$ret=ret*portfolio$weight[i]
}else{
portfolio$ret=merge(portfolio$ret,ret*portfolio$weight[i],all = c(FALSE,FALSE))
}
#Keep in mind that portfolio$ret isn't ret in the usual sense... it's more like a contribution since it's already multiplied by the weight
}
portRet=as.xts(rowSums(portfolio$ret),order.by = index(portfolio$ret))
out=(merge(portRet,factors,all=c(TRUE,FALSE)))
return(out)
}
}
buildPortReg(inFile,start,factors)
library(shiny)
runApp(QQ2)
runApp(quickQuants2)
runApp(quickQuants2)
cd()
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
?NUKK
?NULL
runApp()
setwd("C:/Users/user/~ShinyPractice/quickQuantsDev/quickQuants2")
runApp()
runApp()
runApp()
runApp()
library("shiny", lib.loc="~/R/win-library/3.0")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sample <- read.csv("C:/Users/user/~ShinyPractice/quickQuantsDev/quickQuants2/data/sample.csv", header=FALSE)
View(sample)
sample[,1]
sample <- read.csv("C:/Users/user/~ShinyPractice/quickQuantsDev/quickQuants2/data/sample.csv", header=FALSE, stringsAsFactors=FALSE)
View(sample)
sample[,1]
ticker<-sample[,1]
ticker
builtPortReg(ticker)
buildPortReg(ticker)
inFile<-sample[,1]
buildPortReg(inFile)
buildPortReg(inFile,"2014-01-01",factors)
buildPortReg(inFile,"2014-01-01",factors)
buildPortReg(ticker,"2014-01-01",factors)
sample[1,2]
sample[1,1]
is.character(sample[1,1])
runApp
runApp()
library
library
library(shiny)
runApp()
library(shint)
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
library(shiny)
runApp(display.mode="showcase")
inFile<-read.table("sample.csv",sep=",")
start='2012-01-01'
download.file("http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/ftp/F-F_Research_Data_Factors_daily.zip","factors.zip")
factors=unz("factors.zip","F-F_Research_Data_Factors_daily.txt")
factors=read.table(factors,header=TRUE,skip=4,fill=TRUE)
n=nrow(factors)-1
factors=unz("factors.zip","F-F_Research_Data_Factors_daily.txt")
factors=read.table(factors,header=TRUE,skip=4,fill=TRUE,nrows=n)
row.names(factors)=(as.Date(row.names(factors),format="%Y%m%d"))
names(factors)[names(factors)=="Mkt.RF"]="MarketPremium"
factors=as.xts(factors/100,dateFormat="Date")
library(shiny)
library(quantmod)
library(xts)
library(rugarch)
library(stargazer)
library(knitr)
buildPortReg=function(inFile,start,factors){
portfolio=list(
ticker=NULL
,weight=NULL
,ret=NULL
)
for(i in (1:nrow(inFile))){
portfolio$ticker[i]=as.character(inFile[i,1])
portfolio$weight[i]=inFile[i,2]
ret=try(getSymbols(portfolio$ticker[i],auto.assign=FALSE,from=as.Date(start)))
if(class(ret)[1]=="try-error"){
##Catch error here with:
#error handling later
print("Oops... Something went horribly wrong. Please call Merissa.")
return("fuck")
}
ret=ret[,6]
names(ret)[1]="price"
ret$ret=NA
for ( j in 2:nrow(ret)){
ret$ret[j]=as.numeric(ret$price[j])/as.numeric(ret$pric[j-1])-1
}
ret=na.omit(ret$ret)
if(i==1){
portfolio$ret=ret*portfolio$weight[i]
}else{
portfolio$ret=merge(portfolio$ret,ret*portfolio$weight[i],all = c(FALSE,FALSE))
}
#Keep in mind that portfolio$ret isn't ret in the usual sense... it's more like a contribution since it's already multiplied by the weight
}
portRet=as.xts(rowSums(portfolio$ret),order.by = index(portfolio$ret))
out=(merge(portRet,factors,all=c(TRUE,FALSE)))
return(out)
}
inFile<-read.table("sample.csv",sep=",")
start='2012-01-01'
download.file("http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/ftp/F-F_Research_Data_Factors_daily.zip","factors.zip")
factors=unz("factors.zip","F-F_Research_Data_Factors_daily.txt")
factors=read.table(factors,header=TRUE,skip=4,fill=TRUE)
n=nrow(factors)-1
factors=unz("factors.zip","F-F_Research_Data_Factors_daily.txt")
factors=read.table(factors,header=TRUE,skip=4,fill=TRUE,nrows=n)
row.names(factors)=(as.Date(row.names(factors),format="%Y%m%d"))
names(factors)[names(factors)=="Mkt.RF"]="MarketPremium"
factors=as.xts(factors/100,dateFormat="Date")
library(shiny)
library(quantmod)
library(xts)
library(rugarch)
library(stargazer)
library(knitr)
buildPortReg=function(inFile,start,factors){
portfolio=list(
ticker=NULL
,weight=NULL
,ret=NULL
)
for(i in (1:nrow(inFile))){
portfolio$ticker[i]=as.character(inFile[i,1])
portfolio$weight[i]=inFile[i,2]
ret=try(getSymbols(portfolio$ticker[i],auto.assign=FALSE,from=as.Date(start)))
if(class(ret)[1]=="try-error"){
##Catch error here with:
#error handling later
print("Oops... Something went horribly wrong. Please call Merissa.")
return("fuck")
}
ret=ret[,6]
names(ret)[1]="price"
ret$ret=NA
for ( j in 2:nrow(ret)){
ret$ret[j]=as.numeric(ret$price[j])/as.numeric(ret$pric[j-1])-1
}
ret=na.omit(ret$ret)
if(i==1){
portfolio$ret=ret*portfolio$weight[i]
}else{
portfolio$ret=merge(portfolio$ret,ret*portfolio$weight[i],all = c(FALSE,FALSE))
}
#Keep in mind that portfolio$ret isn't ret in the usual sense... it's more like a contribution since it's already multiplied by the weight
}
portRet=as.xts(rowSums(portfolio$ret),order.by = index(portfolio$ret))
out=(merge(portRet,factors,all=c(TRUE,FALSE)))
return(out)
}
buildPortReg(inFile,start,factors)
View(inFile)
runApp()
runApp()
library(shiny)
runApp()
runApp()
runApp()
download.file("http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/ftp/F-F_Research_Data_Factors_daily.zip","factors.zip")
factors=unz("factors.zip","F-F_Research_Data_Factors_daily.txt")
factors=read.table(factors,header=TRUE,skip=4,fill=TRUE)
n=nrow(factors)-1
factors=unz("factors.zip","F-F_Research_Data_Factors_daily.txt")
factors=read.table(factors,header=TRUE,skip=4,fill=TRUE,nrows=n)
row.names(factors)=(as.Date(row.names(factors),format="%Y%m%d"))
names(factors)[names(factors)=="Mkt.RF"]="MarketPremium"
factors=as.xts(factors/100,dateFormat="Date")
download.file("http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/ftp/F-F_Research_Data_Factors_daily.zip","factors.zip")
factors=unz("factors.zip","F-F_Research_Data_Factors_daily.txt")
factors=read.table(factors,header=TRUE,skip=4,fill=TRUE)
n=nrow(factors)-1
factors=unz("factors.zip","F-F_Research_Data_Factors_daily.txt")
factors=read.table(factors,header=TRUE,skip=4,fill=TRUE,nrows=n)
row.names(factors)=(as.Date(row.names(factors),format="%Y%m%d"))
names(factors)[names(factors)=="Mkt.RF"]="MarketPremium"
factors=as.xts(factors/100,dateFormat="Date")
download.file("http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/ftp/F-F_Research_Data_Factors_daily.zip","factors.zip")
factors=unz("factors.zip","F-F_Research_Data_Factors_daily.txt")
factors=read.table(factors,header=TRUE,skip=4,fill=TRUE)
n=nrow(factors)-1
factors=unz("factors.zip","F-F_Research_Data_Factors_daily.txt")
factors=read.table(factors,header=TRUE,skip=4,fill=TRUE,nrows=n)
row.names(factors)=(as.Date(row.names(factors),format="%Y%m%d"))
names(factors)[names(factors)=="Mkt.RF"]="MarketPremium"
factors=as.xts(factors/100,dateFormat="Date")
runApp()
runApp()
install.packages(c("bit", "chron", "data.table", "digest", "evaluate", "ff", "foreach", "forecast", "formatR", "ggplot2", "glmnet", "gss", "highr", "iterators", "knitr", "ks", "labeling", "lmtest", "markdown", "mnormt", "mvtnorm", "nloptr", "plyr", "RcppArmadillo", "reshape", "reshape2", "rgl", "RJSONIO", "rugarch", "sandwich", "scales", "shiny", "spd", "stargazer", "truncnorm", "tsDyn", "zoo"))
runApp()
library(shiny)
runApp()
library(shiny)
RunApp()
runapp()
RunApps()
RunApp()
runapp()
runapps()
?runapp
runApp()
runApp()
library(shiny)
runApp(quickQuants2)
runApp(QQ)
runApp(quickQuants2)
runApp()
library(shiny)
runApp()
data<-read.csv("sample.txt",sep=",",head=FALSE)
getwd()
inFile <- read.csv("C:/Users/user/~ShinyPractice/quickQuantsDev/quickQuants2/data/sample.csv", header=FALSE)
View(inFile)
inFile(,1)
inFile[],1]
inFile[,1]
?read.csv
read.csv(inFile)[,1]
inFile<-read.csv("sample.csv",head=FALSE)
inFile
inFile[,1]
inFile[,2]
as.character(inFile[,1])
runApp()
runApp()
library(shiny)
runApp()
runApp()
download.file("http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/ftp/F-F_Research_Data_Factors_daily.zip","factors.zip")
factors=unz("factors.zip","F-F_Research_Data_Factors_daily.txt")
factors=read.table(factors,header=TRUE,skip=4,fill=TRUE)
n=nrow(factors)-1
factors=unz("factors.zip","F-F_Research_Data_Factors_daily.txt")
factors=read.table(factors,header=TRUE,skip=4,fill=TRUE,nrows=n)
row.names(factors)=(as.Date(row.names(factors),format="%Y%m%d"))
names(factors)[names(factors)=="Mkt.RF"]="MarketPremium"
factors=as.xts(factors/100,dateFormat="Date")
buildPortReg
inFile=read.csv("sample.csv")
inFile
inFile=read.csv("sample.csv",head=FALSE)
inFile
runApp()
inFile
buildPortReg(inFile,"2005-01-01",factors)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
inF
inFile
is.character(inFile)
!is.character(inFile)
runApp()
runApp()
runApp()
runApp()
runApp()\
runApp()
runApp()
runApp()
runApp()
a
b
is.null(b)
runApp()
runApp()
runApp()
runApp()
test=buildPortReg(inFile,"2014-08-08",factors)
test
class(test)
names(test)
test=buildPortReg(inFile,"2014-08-08",factors)
class(test)
names(test)
test=buildPortReg(inFile,"2014-08-08",factors)
names(test)
test=buildPortReg(inFile,"2014-08-08",factors)
names(test)
rm:rm(buildPortReg
)
source("buildPortReg.R")
test=buildPortReg(inFile,"2014-08-08",factors)
names(test)
runApp(0)
runApp()
test["2014-01-01/2014-09-09"]
reg=buildPortReg(inFile,"2014-01-01",factors)["2014-01-01/2014-05-05"]
reg
modelCAPM=reactive(lm(I(ret-RF)~MarketPremium,data=reg))
runApp()
runApp()
runApp()
runApp(display.mode = showcase)
runApp(display.mode = "showcase")
index(reg)
range(index(reg))
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
