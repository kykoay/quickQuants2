{
    "contents" : "library(shiny)\nlibrary(quantmod)\nlibrary(xts)\nlibrary(rugarch)\nlibrary(stargazer)\nlibrary(knitr)\n\nshinyServer(function(input,output){\n  source(\"buildPortReg.R\")\n  #Download factor data from Ken French's website. Possibily to extend to higher dimensions, but have to harmonise factor time series.\n  #This script is from Evan, and it extracts the FF-3 Factors and names it factors.\n  download.file(\"http://mba.tuck.dartmouth.edu/pages/faculty/ken.french/ftp/F-F_Research_Data_Factors_daily.zip\",\"factors.zip\")\n  \n  factors=unz(\"factors.zip\",\"F-F_Research_Data_Factors_daily.txt\")\n  factors=read.table(factors,header=TRUE,skip=4,fill=TRUE)\n  n=nrow(factors)-1\n  \n  factors=unz(\"factors.zip\",\"F-F_Research_Data_Factors_daily.txt\")\n  factors=read.table(factors,header=TRUE,skip=4,fill=TRUE,nrows=n)\n  row.names(factors)=(as.Date(row.names(factors),format=\"%Y%m%d\"))\n  names(factors)[names(factors)==\"Mkt.RF\"]=\"MarketPremium\"\n  \n  \n  factors=as.xts(factors/100,dateFormat=\"Date\")\n  \n  #grabbing user uploaded file and applies buildPortReg function on it.\n  \n  inFile=reactive({input$file})\n  \n  observe({\n    if (is.null(inFile())) {\n      output$greeting=renderText({\"Please upload a file\"})\n    }else{\n      reg=reactive({\n        \n        inFile<-input$file\n        \n        inFile=read.csv(inFile$datapath,head=FALSE)\n        \n        return(buildPortReg(inFile,input$dateRange[1],factors)[paste(input$dateRange[1],\"/\",input$dateRange[2],sep=\"\")])\n      })\n      \n      \n      modelCAPM=reactive(lm(I(ret-RF)~MarketPremium,data=reg()))\n      modelFF3=reactive(lm(I(ret-RF)~MarketPremium+SMB+HML,data=reg()))\n\n      output$regTable <- renderPrint({        \n        \n        stargazer(modelCAPM(),modelFF3(),dep.var.labels=input$ticker,type=\"html\",title=paste(\"Factor Loadings from\",range(index(reg()))[1],\"to\",range(index(reg()))[2],\":\"))\n        \n      })\n    }\n  })\n\n#Allows user to download output\n#output$downloadData <- downloadHandler(\n#filename = function() {\n#paste(input$ticker,'.csv', sep='')\n#},\n#content = function(con) {\n#write.zoo(reg(),con,index.name=\"date\")\n#}\n#)\n\n#   \n#   \n#Computer the GARCH part\n#spec=ugarchspec(\n#variance.model=list(\n#model='sGARCH',\n#garchOrder=c(1,1),\n#submodel=NULL,\n#external.regressors=NULL,\n#variance.targeting=FALSE\n#),\n#mean.model=list(\n#armaOrder=c(0,0),\n#include.mean=FALSE,\n#archm=FALSE,\n#archpow=0,\n#arfima=FALSE,\n#external.regressors=NULL,\n#archex=FALSE\n#),\n#distribution.model='sstd',\n#)\n\n#fit=reactive({ugarchfit(spec=spec,data=log(1+reg()$ret))})\n\n#garchWhichPlot=reactive({\n#switch(input$garchPlotType,\n#\"Series with 1% VaR limites\"=2,\n#\"QQ-Plot\"=9\n#)\n#})\n\n#output$garchPlot=renderPlot({\n#plot(fit(),which=garchWhichPlot())\n#})\n\n#output$downloadReport=downloadHandler(filename=\"quickQuantsReport.pdf\",\n#content=function(file){\n#Thanks, to brechtdv\n# generate PDF\n#knit2pdf(\"report.Rnw\")\n\n# copy pdf to 'file'\n#file.copy(\"report.pdf\", file)\n\n# delete generated files\n#file.remove(\"report.pdf\", \"report.tex\",\n#\"report.aux\", \"report.log\")\n\n# delete folder with plots\n#unlink(\"figure\", recursive = TRUE)\n#},\n#contentType = \"application/pdf\"\n#)\n\n\n\n})\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1408065809646.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "779392510",
    "id" : "AFA1085C",
    "lastKnownWriteTime" : 1410482988,
    "path" : "C:/Users/user/~ShinyPractice/quickQuantsDev/quickQuants2/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}